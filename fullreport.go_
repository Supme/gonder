package main

import (
	"database/sql"
	_ "github.com/go-sql-driver/mysql"
	"os/user"
	"github.com/howeyc/gopass"
	"fmt"
	"flag"
	"os"
)

var (
	db *sql.DB
	err error
	dbUser, dbPassword, dbServer, dbName, csvFile string
)

func init() {
	u, err := user.Current()
	if err != nil {
		dbUser = "anonymous"
	} else {
		dbUser = u.Username
	}
	flag.StringVar(&dbUser, "u", dbUser, "Database user")
	flag.StringVar(&dbPassword, "p", "", "Database password")
	flag.StringVar(&dbServer, "s", "localhost", "Database server")
	flag.StringVar(&dbName, "b", "", "Database name")
	flag.StringVar(&csvFile, "f", "./fullreport.csv", "Output file")
	flag.Parse()
}

func main() {
	if dbPassword == "" {
		fmt.Printf("Password: ")
		p, err := gopass.GetPasswdMasked()
		check(err)
		dbPassword = string(p)
	}

	db, err = sql.Open("mysql", fmt.Sprintf("%s:%s@tcp(%s:3306)%s", dbUser, dbPassword, dbServer, "/"+dbName))
	check(err)

	// Отправленно
	stmtSendCount, err := db.Prepare("SELECT COUNT(id) FROM `recipient` WHERE `status` IS NOT NULL AND `removed`='0' AND `campaign_id`=?")
	check(err)
	defer stmtSendCount.Close()

	// Доставленно
	stmtDeliveredCount, err := db.Prepare("SELECT COUNT(id) FROM `recipient` WHERE `status`='Ok' AND `removed`='0' AND `campaign_id`=?")
	check(err)
	defer stmtDeliveredCount.Close()

	// Открыто
	stmtOpenCount, err := db.Prepare("SELECT COUNT(id) FROM `recipient` WHERE (`client_agent` IS NOT NULL OR `web_agent` IS NOT NULL) AND `removed`='0' AND `campaign_id`=?")
	check(err)
	defer stmtOpenCount.Close()

	// Переходов по ссылкам
	stmtJumpCount, err := db.Prepare("SELECT COUNT(DISTINCT `recipient`.`id`) FROM `jumping` INNER JOIN `recipient` ON `jumping`.`recipient_id`=`recipient`.`id` WHERE `recipient`.`removed`=0 AND `jumping`.`url` NOT IN ('open_trace', 'web_version', 'unsubscribe') AND `jumping`.`campaign_id`=?")
	check(err)
	defer stmtJumpCount.Close()

	// Недоставленно мягко
	stmtSafeBounceCount, err := db.Prepare("SELECT COUNT(id) FROM `recipient` WHERE `status` LIKE '4%' AND `removed`='0' AND `campaign_id`=?")
	check(err)
	defer stmtSafeBounceCount.Close()

	campaign, err := db.Query("SELECT `group_id`, `id` FROM `campaign` ORDER BY `group_id`")
	check(err)

	csv, err := os.OpenFile(csvFile, os.O_RDWR|os.O_CREATE|os.O_APPEND, 0666)
	check(err)
	defer csv.Close()

	fmt.Fprintf(csv,"groupId;campaignId;sendCount;deliveredCount;openCount;jumpCount;safeBounceCount;hardBounceCount;\r\n")

	for campaign.Next() {
		var (
			groupId, campaignId, sendCount, deliveredCount, openCount, jumpCount, safeBounceCount, hardBounceCount int64
		)

		campaign.Scan(&groupId, &campaignId)

		send := stmtSendCount.QueryRow(campaignId)
		send.Scan(&sendCount)

		delivered := stmtDeliveredCount.QueryRow(campaignId)
		delivered.Scan(&deliveredCount)

		open := stmtOpenCount.QueryRow(campaignId)
		open.Scan(&openCount)

		jump := stmtJumpCount.QueryRow(campaignId)
		jump.Scan(&jumpCount)

		safeBounced := stmtSafeBounceCount.QueryRow(campaignId)
		safeBounced.Scan(&safeBounceCount)

		hardBounceCount = sendCount - (deliveredCount + safeBounceCount)

		fmt.Fprintf(csv,"%v;%v;%v;%v;%v;%v;%v;%v;\r\n", groupId, campaignId, sendCount, deliveredCount, openCount, jumpCount, safeBounceCount, hardBounceCount)
	}

}

func check(err error) {
	if err != nil {
		fmt.Println(err.Error())
		os.Exit(1)
	}
	return
}